#!/usr/bin/env python
#
# dkimrelay.py -- Sign outgoing email with DKIM
#
# This script is specific for the configured domains, and uses the
# configured key for each of them, using the configured selector name.
#
# Multiple domains can use the same key and may also use other signing
# tools or different instances of this tool; it is possible to configure
# different selectors because the one used is mentioned in the added
# DKIM-Signature header.
#
# Home of DKIMrelay: https://github.com/arpa2/dkimrelay
#
# From: Rick van Rein <rick@openfortress.nl>


import sys
from syslog import *

import asyncore
import smtpd
import smtplib
import anydbm

import email.parser, email.header, email.message

import dkim

import ConfigParser


#
# Load the DKIM configuration from /etc/arpa2mail/dkimrelay.conf
#

defaults = {
	'domains': [],
	'subjecttagdb': '/etc/arpa2mail/rcpt2subjtag.db',
	'relayhost': 'localhost',
	'relayport': '25',
	'listenhost': 'localhost',
	'listenport': '25',
	'canonicalisation_headers': 'relaxed',
	'canonicalisation_body':    'relaxed',
	'sign_alg': 'rsa-sha256',
	'headers': None
}

cfg = ConfigParser.RawConfigParser (defaults)
try:
	cfgf = open ('/etc/arpa2mail/dkimrelay.conf')
except:
	cfgf = open ('dkimrelay.conf')
cfg.readfp (cfgf)
cfgf.close ()

#
# Load the various configuration variables
#

domains = cfg.get ('DKIM', 'domains').split ()
all_domains = '*' in domains

subjecttagdb = cfg.get ('DKIM', 'subjecttagdb')

relay_host = cfg.get ('DKIM', 'relayhost')
relay_port = int (cfg.get ('DKIM', 'relayport'))

listen_host = cfg.get ('DKIM', 'listenhost')
listen_port = int (cfg.get ('DKIM', 'listenport'))

selector_patn = cfg.get ('DKIM', 'selector')

privkey_patn = cfg.get ('DKIM', 'privkey')

canon_hdrs = cfg.get ('DKIM', 'canonicalisation_headers')
canon_body = cfg.get ('DKIM', 'canonicalisation_body')
canonicalisation = (canon_hdrs, canon_body)

sign_alg = cfg.get ('DKIM', 'sign_alg')

headers = cfg.get ('DKIM', 'headers')


# Code based on https://github.com/MiroslavHoudek/postfix-filter-loop


class SigningSMTPServer (smtpd.SMTPServer):

	def process_message (self, peer, mailfrom, rcpttos, data):
		#
		#HUH?# mailfrom.replace ('\'', '')
		#HUH?# mailfrom.replace ('\"\, '')
		#
		#HUH?# for rcpt in rcpttos:
		#HUH?# 	rcpt.replace ('\'', '')
		#HUH?# 	rcpt.replace ('\"\, '')
		#
		# Prepend any [tags] for recipients to the Subject: header
		#
		tags = []
		try:
			subject_tagging = anydbm.open (subjecttagdb, 'r')
		except:
			subject_tagging = { }
		for rcpt in rcpttos:
			try:
				static_tag = cfg.get ('RCPT2SUBJTAG', rcpt)
				tags.append (static_tag)
				sys.stderr.write ('Adding static tag ' + tags [-1] + ' for email to ' + rcpt + '\n')
				continue
			except:
				pass
			try:
				tags.append (subject_tagging [rcpt])
				sys.stderr.write ('Adding tag ' + tags [-1] + ' for email to ' + rcpt + '\n')
			except:
				pass
		if type (subject_tagging) != type ({}):
			subject_tagging.close ()
		if len (tags) > 0:
			prs = email.parser.Parser ()
			msg = prs.parsestr (data)
			subj = msg ['Subject']
			change = False
			for tag in tags:
				if not tag in subj:
					subj = tag + ' ' + subj
					change = True
			if change:
				msg.replace_header ('Subject', subj)
				data = msg.as_string ()
				data = data.replace ('\r\n', '\n')
				data = data.replace ('\n', '\r\n')
		#
		# Proceed with DKIM signing
		#
		try:
			domind = 1 + mailfrom.rindex ('@')
			#DEBUG# syslog (LOG_DEBUG, 'Domain index is ' + str (domind))
			fromdom = mailfrom [domind:]
			#DEBUG# syslog (LOG_DEBUG, 'Domain is ' + str (fromdom))
			#DEBUG# syslog (LOG_DEBUG, 'Private key size ' + str (len (privkey_data)))
			if all_domains or fromdom in domains:
				map = { 'domain': fromdom }
				selector = selector_patn % map
				map ['selector'] = selector
				privkey_fn = privkey_patn % map
				privkey_data = open (privkey_fn).read ()
				dkimsig_hdr = dkim.sign (
						message=data,
						selector=selector,
						domain=fromdom,
						privkey=privkey_data,
						identity=mailfrom,
						canonicalize=canonicalisation,
						signature_algorithm=sign_alg,
						include_headers=headers,
						length=False,
						logger=None )
				if dkimsig_hdr [-5:] == '\r\n \r\n':
					dkimsig_hdr = dkimsig_hdr [:-3]
				data = dkimsig_hdr + data
				syslog (LOG_INFO, 'Successfully signed mail from ' + mailfrom)
			else:
				syslog (LOG_NOTICE, 'Not DKIM-signed mail from ' + mailfrom)
		except Exception, e:
			syslog (LOG_ERR, 'Exception in DKIM filter: '
						+ str (e) + '\n')
			# Silent error: Send without signature
		finally:
			try:
				fwd = smtplib.SMTP (relay_host, relay_port)
				fwd.sendmail (mailfrom, rcpttos, data)
				fwd.quit ()
			except smtplib.SMTPException, e:
				syslog (LOG_ERR, 'Exception in SMTP relay: ' + str (e))
				syslog (LOG_ERR, 'Exception in SMTP relay: '
						+ str (e) + '\n')
				# Loud error: Break off client connection
				raise



openlog ("dkimrelay", LOG_NDELAY, LOG_MAIL)

server = SigningSMTPServer ( (listen_host, listen_port), None)

asyncore.loop ()

